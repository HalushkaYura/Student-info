@page "/student"
@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model

@inject NotificationService notificationService
@inject IBaseRepository<Student> studentRepositoty 
@inject IJSRuntime JSRuntime
@inject IBaseRepository<StudentInfo.Model.Group> groupRepositoty 

@inject DialogService dialogService


<PageTitle>Students</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Students" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton ButtonStyle="ButtonStyle.Success"  Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>

        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@students" TItem="Student" RowSelect="@EditRow">
                <Columns>
                    <RadzenDataGridColumn TItem="Student" Property="StudentId" Title="Id">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Student" Property="Name" Title="Name">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Student" Property="Surname" Title="Surname">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="GroupId" Title="Group">
                        <Template Context="group">
                            <div class="wrap-text">@(GetGroupName(group.GroupId))</div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="Course" Title="Course">

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="BornDate" Title="Born Date">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="PhoneNumber" Title="Phone Number">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="GPA" Title="G P A">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="DateStartStudy" Title="Date Start Study">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Property="DateEndStudy" Title="Date End Study">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Student" Filterable="false" Sortable="false" Width="150px" TextAlign="TextAlign.Center">
                        <Template Context="student">
                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => EditRow(student)) @onclick:stopPropagation="true" />

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, student)) @onclick:stopPropagation="true" />

                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
@code {
    protected IEnumerable<Student> students;

    protected RadzenDataGrid<Student> grid0;

 
    protected override async Task OnInitializedAsync()
    {
        students = studentRepositoty.GetAllElements();
    }
    private string GetGroupName(int id)
    {
        return groupRepositoty.GetElementById(id).Name;
    }
    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await dialogService.OpenAsync<AddStudent>("Add Student", null);
        await grid0.Reload();
        await RefreshTable();
    }

    protected async Task EditRow(Student args)
    {
        await dialogService.OpenAsync<EditStudent>("Edit Student", new Dictionary<string, object> { { "StudentId", args.StudentId } });
        RefreshTable();
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, Student student)
    {
        try
        {
            if (await dialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = studentRepositoty.DeleteElement(student.StudentId);
                RefreshTable();

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Student"
                });
        }
    }

    public async Task RefreshTable()
    {
        students = studentRepositoty.GetAllElements();        
    }
}

