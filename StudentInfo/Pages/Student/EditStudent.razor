@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model

@inject NotificationService notificationService
@inject IBaseRepository<Student> studentRepositoty
@inject IJSRuntime JSRuntime
@inject IBaseRepository<StudentInfo.Model.Group> groupRepositoty
@inject DialogService dialogService

<PageTitle>Edit Student</PageTitle>

<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Student</RadzenAlert>
    <RadzenTemplateForm TItem="Student" Data="@student" Visible="@(student != null)" Submit="@FormSubmit">

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@student.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Surname" Component="Surname" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@student.Surname" Name="Surname" />
                <RadzenRequiredValidator Component="Surname" Text="Surname is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Course" Component="Course" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenNumeric style="display: block; width: 100%" @bind-Value="@student.Course" Name="Course" />
                <RadzenRequiredValidator Component="Course" Text="Course is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Born Date" Component="BornDate" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@student.BornDate" Name="BornDate" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="G P A" Component="GPA" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenNumeric style="display: block; width: 100%" @bind-Value="@student.GPA" Name="GPA" />
                <RadzenRequiredValidator Component="GPA" Text="GPA is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Phone Number" Component="PhoneNumber" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@student.PhoneNumber" Name="PhoneNumber" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Date Start Study" Component="DateStartStudy" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@student.DateStartStudy" Name="DateStartStudy" />
                <RadzenRequiredValidator Component="DateStartStudy" Text="DateStartStudy is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Date End Study" Component="DateEndStudy" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDatePicker DateFormat="MM/dd/yyyy" style="display: block; width: 100%" @bind-Value="@student.DateEndStudy" Name="DateEndStudy" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Group" Component="Group" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenDropDown Data="@groupsForGroupId" TextProperty="Name" ValueProperty="GroupId" AllowClear=true
                                Placeholder="Choose Group" style="display: block; width: 100%" @bind-Value="@student.GroupId" Name="GroupId" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>

@code {
    [Parameter]
    public int StudentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        student = studentRepositoty.GetElementById(StudentId);

        groupsForGroupId = groupRepositoty.GetAllElements().ToList();
    }
    protected bool errorVisible;
    protected Student student;

    protected List<StudentInfo.Model.Group> groupsForGroupId;

    protected async Task FormSubmit()
    {
        try
        {
            studentRepositoty.UpdateElement(StudentId, student);
            dialogService.Close(student);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }

}
