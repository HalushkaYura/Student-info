@page "/departments"

@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model
@using StudentInfo.Model.DTOs
@inject Radzen.DialogService dialogService
@inject IBaseRepository<Department> departmentRepository
@inject NotificationService notificationService

<PageTitle>Departments</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Departments" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="@Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@departments" TItem="Department" RowSelect="@EditRow">
                <Columns>
                    <RadzenDataGridColumn TItem="Department" Property="DepartmentId" Title="Department Id">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Department" Property="Name" Title="Name">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Department" Property="Faculty.Name" Title="Faculty">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Department" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="department">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, department)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {
    protected List<Department> departments;

    protected RadzenDataGrid<Department> grid0;

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        departments = departmentRepository.GetAllElements().ToList();

    }
    protected override async Task OnInitializedAsync()
    {
        departments = departmentRepository.GetAllElements().ToList();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        //await dialogService.OpenAsync<AddDepartment>("Add Department", null);
        await grid0.Reload();
    }

    protected async Task EditRow(Department args)
    {
        //await DialogService.OpenAsync<EditDepartment>("Edit Department", new Dictionary<string, object> { { "DepartmentId", args.DepartmentId } });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, Department department)
    {
        try
        {
            if (await dialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = departmentRepository.DeleteElement(department.DepartmentId);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Department"
                });
        }
    }
}
