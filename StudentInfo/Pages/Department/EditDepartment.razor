@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model
@using StudentInfo.Model.DTOs
@inject Radzen.DialogService dialogService
@inject IBaseRepository<Department> departmentRepository
@inject NotificationService notificationService

<RadzenStack>
    <PageTitle>Edit Department</PageTitle>
</RadzenStack>

<RadzenStack>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Department</RadzenAlert>
    <RadzenTemplateForm TItem="Department" Data="@department" Visible="@(department != null)" Submit="@FormSubmit">
       
        <RadzenColumn Size="12">
            <RadzenFormField Text="Назва">
                <RadzenTextBox @bind-Value="@department.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Обов'язкове поле!" />
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="delete" Click="DeleteDepartment" />
            </RadzenFormField>
        </RadzenColumn>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem " Style="padding: 5px">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" /> 
        </RadzenStack>

    </RadzenTemplateForm>
</RadzenStack>

@code {
    [Parameter] 
    public int DepartmentId { get; set; }
    [Parameter] 
    public EventCallback<DepartmentCreate> OnDepartmentEdit { get; set; }
    [Parameter]
    public EventCallback<DepartmentCreate> OnDepartmentRemove { get; set; }
    private Department department;
    protected bool errorVisible;
    protected override async Task OnInitializedAsync()
    {
        department = departmentRepository.GetElementById(DepartmentId);
    }
    protected async Task FormSubmit()
    {
        try
        {
            departmentRepository.UpdateElement(DepartmentId, department);
            dialogService.Close(department);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }
    // private string GetName() => DepartmentId.ToString();

    private async Task DeleteDepartment()
    {
        try
        {
            if (await dialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                departmentRepository.DeleteElement(DepartmentId);
                dialogService.Close(null);
                StateHasChanged();
             }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Faculty"
                });
        }
    }
}

