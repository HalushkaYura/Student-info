@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model
@using StudentInfo.Model.DTOs
@inject Radzen.DialogService dialogService
@inject IBaseRepository<Department> departmantRepository

<RadzenStack>
    <PageTitle>Add Departmant</PageTitle>
</RadzenStack>
<RadzenStack>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Departmant</RadzenAlert>
    <RadzenTemplateForm TItem="DepartmantCreate" Data="@departmant" Visible="@(departmant!= null)" Submit="@FormSubmit">

        <RadzenFormField Text="Назва">
            <RadzenTextBox @bind-Value="@departmant.Name" Name="Name" />
            <RadzenRequiredValidator Component="Name" Text="Обов'язкове поле!" />
        </RadzenFormField>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem " Style="padding: 5px">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenStack>


@code {
    [Parameter] public EventCallback<DepartmantCreate> OnDepartmentCreated { get; set; }
    protected override async Task OnInitializedAsync()
    {
        departmant = new DepartmantCreate();
    }

    protected bool errorVisible;
    protected DepartmantCreate departmant;
    protected async Task FormSubmit()
    {
        try
        {
            await OnDepartmentCreated.InvokeAsync(departmant);
            dialogService.Close(departmant);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        dialogService.Close(null);
    }
}
