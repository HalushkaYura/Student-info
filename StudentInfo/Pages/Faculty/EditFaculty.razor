@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model
@using StudentInfo.Model.DTOs
@using StudentInfo.Pages.Department
@using Radzen.Blazor;
@inject Radzen.DialogService dialogService
@inject IBaseRepository<Faculty> FacultyRepository
@inject IBaseRepository<Department> departmentRepository

<PageTitle>Edit Faculty</PageTitle>

  <RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Faculty</RadzenAlert>
    <RadzenTemplateForm TItem="StudentInfo.Model.Faculty" Data="@faculty" Visible="@(faculty != null)" Submit="@FormSubmit">

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" @bind-Value="@faculty.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Note" Component="Note" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" @bind-Value="@faculty.Note" Name="Note" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem " Style="padding: 5px">
            <RadzenButton ButtonStyle="ButtonStyle.Info" Text="Add Department" Variant="Variant.Flat" Click="@AddDepartmantButtonClick" />
        </RadzenStack>

        @if (departments.Count() != 0)
        {
            <RadzenFieldset Text="Departments:">
                @foreach (var departmentModel in departments)
                    {
                            <div class="row wrap-text" style="overflow:auto; max-height:100px;">
                                <div class="col col-9"  style="display: flex; align-items: flex-start;">
                            
                                    <RadzenIcon Icon="label" style="margin-right: 5px;" />
                                    @departmentModel.Name
                                </div>
                                <div class="col col-3">
                                    <RadzenButton  Icon="edit"  ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.ExtraSmall" Click="() => EditDepartment(departmentModel.DepartmentId)">
                                    </RadzenButton>
                                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Click="() => RemoveDepartment(departmentModel)">
                                    </RadzenButton>
                                </div>
                            </div>
                    }
            </RadzenFieldset>
        }
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem">
@*             <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" /> *@
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>
@code {
    [Parameter] public int Id { get; set; }
    private List<Department> departments;
    private List<Department> listNewDepartments = new List<Department>();

    protected override async Task OnInitializedAsync()
    {
        faculty = FacultyRepository.GetElementById(Id);
        await RefreshTable();    
    }

    protected bool errorVisible;
    protected Faculty faculty;

    protected async Task FormSubmit()
    {
        try
        {

            FacultyRepository.UpdateElement(Id, faculty);
            dialogService.Close(faculty);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    // protected async Task CancelButtonClick(MouseEventArgs args)
    // {
    //     List<Department> copyListNewDepartment = new List<Department>(listNewDepartments);
    //     foreach (var i in copyListNewDepartment)
    //     {
    //         await RemoveDepartment(i);
    //     }
    //     dialogService.Close(null);
    // }

    protected async Task AddNewDepartment(DepartmentCreate departmantCreate)
    {
        Department obj = new Department
                {
                    Name = departmantCreate.Name,
                    FacultyId = Id
                };
        listNewDepartments.Add(obj);
        departmentRepository.CreateElement(obj);
        await RefreshTable();
    }

    protected async Task RefreshTable()
    {
        departments = departmentRepository.GetAllElements().Where(d => d.FacultyId == Id).ToList();
    }
    protected async Task RemoveDepartment(Department departmantRemoveId)
    {
        departmentRepository.DeleteElement(departmantRemoveId.DepartmentId);
        listNewDepartments.Remove(departmantRemoveId);
        await RefreshTable();
    }


    protected async Task AddDepartmantButtonClick(MouseEventArgs args)
    {

        await dialogService.OpenAsync("Add Department", ds => @<AddDepartment OnDepartmentCreated="AddNewDepartment" />,
        new DialogOptions() { Width = "300px", Height = "300px", Resizable = false, Draggable = false });
        await RefreshTable();
    }


    protected async Task EditDepartment(int departmentId)
    {
        await dialogService.OpenAsync("Edit Department", ds =>@<EditDepartment DepartmentId="departmentId" />,

        new DialogOptions() { Width = "400px", Height = "200px", Resizable = false, Draggable = false });
        await RefreshTable();
    }

}

