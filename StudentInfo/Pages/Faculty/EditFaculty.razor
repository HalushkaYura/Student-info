@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model
@inject Radzen.DialogService DialogService
@inject IFacultyRepository FacultyRepository

<PageTitle>Edit Faculty</PageTitle>

  <RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Faculty</RadzenAlert>
    <RadzenTemplateForm TItem="StudentInfo.Model.Faculty" Data="@faculty" Visible="@(faculty != null)" Submit="@FormSubmit">           
        
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@faculty.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Note" Component="Note" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@faculty.Note" Name="Note" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>  
@code {
    [Parameter] public EventCallback<bool> OnInitialized { get; set; }
    [Parameter] public int FacultyId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        faculty = FacultyRepository.GetFacultyById(FacultyId);
    }
    protected bool errorVisible;
    protected Faculty faculty;

    protected async Task FormSubmit()
    {
        try
        {
            FacultyRepository.UpdateFaculty(FacultyId, faculty);
            await OnInitialized.InvokeAsync();
            DialogService.Close(faculty);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}

