@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Model
@using StudentInfo.Model.DTOs
@using StudentInfo.Pages.Department
@using Radzen.Blazor;
@inject Radzen.DialogService dialogService
@inject IBaseRepository<Faculty> FacultyRepository
@inject IBaseRepository<Department> departmentRepository

<PageTitle>Edit Faculty</PageTitle>

  <RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save Faculty</RadzenAlert>
    <RadzenTemplateForm TItem="StudentInfo.Model.Faculty" Data="@faculty" Visible="@(faculty != null)" Submit="@FormSubmit">

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" @bind-Value="@faculty.Name" Name="Name" />
                <RadzenRequiredValidator Component="Name" Text="Name is required" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Note" Component="Note" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" @bind-Value="@faculty.Note" Name="Note" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem " Style="padding: 5px">
            <RadzenButton ButtonStyle="ButtonStyle.Info" Text="Add Department" Variant="Variant.Flat" Click="@AddDepartmantButtonClick" />
        </RadzenStack>
<div class="rz-p-sm-12 rz-text-align-center">

            @if (departments.Count() != 0)
            {
                <RadzenFieldset Text="Departments:">
                    <ul>
                        @foreach (var departmentModel in departments)
                        {
                            <li>
                                <div class="row">
                                    <div class="col col-9">
                                        @departmentModel.Name
                                    </div>
                                    <div class="col col-3">
                                        <RadzenButton ButtonStyle="ButtonStyle.Warning" ButtonType="ButtonType.Button" Icon="edit" Click="@(() => EditDepartment(departmentModel))" />
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </RadzenFieldset>
            }
</div>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>  
@code {
    [Parameter] public int Id { get; set; }
    private List<Department> departments;
    private List<Department> originDepartments;
    private List<Department> listNewDepartmants = new List<Department>();
    private string selectedDepartment;


    // private void OnListBoxChange(ChangeEventArgs e)
    // {
    //     if (int.TryParse(e.Value.ToString(), out int value))
    //     {
    //         selectedDepartmentId = value;
    //         StateHasChanged();
    //     }
    // }

    protected override async Task OnInitializedAsync()
    {
        faculty = FacultyRepository.GetElementById(Id);
        departments = departmentRepository.GetAllElements().Where(d => d.FacultyId == Id).ToList();
        originDepartments = departments;
    }
    private void RefreshDepartmant()
    {
        departments = departmentRepository.GetAllElements().Where(d => d.FacultyId == Id).ToList();
        StateHasChanged();
    }

    protected bool errorVisible;
    protected Faculty faculty;

    protected async Task FormSubmit()
    {
        try
        {

            FacultyRepository.UpdateElement(Id, faculty);
            dialogService.Close(faculty);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        var copyOfDepartmants = new List<Department>(listNewDepartmants);

        foreach (var dep in copyOfDepartmants)
        {
            await RemoveDepartment(dep);
        }
        dialogService.Close(null);
        RefreshDepartmant();
    }

    protected async Task AddNewDepartmant(DepartmantCreate departmantCreate)
    {
        Department obj = new Department
                {
                    Name = departmantCreate.Name,
                    FacultyId = Id
                };

        departmentRepository.CreateElement(obj);
        listNewDepartmants.Add(obj);
        RefreshDepartmant();
    }

    protected async Task RemoveDepartment(Department departmantRemove)
    {
        departmentRepository.DeleteElement(departmantRemove.DepartmentId);
        listNewDepartmants.Remove(departmantRemove);
        RefreshDepartmant();
    }

    protected async Task AddDepartmantButtonClick(MouseEventArgs args)
    {

        await dialogService.OpenAsync("Add Department", ds => @<AddDepartment OnDepartmentCreated="AddNewDepartmant" />,
        new DialogOptions() { Width = "300px", Height = "300px", Resizable = false, Draggable = false });
    }

    private List<Department> GetDepartmentsForFaculty(int facultyId)
    {
        return departments.Where(d => d.FacultyId == facultyId).ToList();
    }

    protected async Task EditDepartment(Department departmentToEdit)
    {
        await dialogService.OpenAsync("Edit Department", ds => @<EditDepartment  DepartmentUpdate="@departmentToEdit" />,
        new DialogOptions() { Width = "300px", Height = "300px", Resizable = false, Draggable = false });
        RefreshDepartmant();
    }
}

