@page "/faculty"
@inject NotificationService notificationService
@inject IBaseRepository<Faculty> facultyRepository
@inject IBaseRepository<Department> departmentRepository

@inject IJSRuntime JSRuntime
@inject DialogService dialogService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject NavigationManager NavigationManager
@using StudentInfo.Interfaces.IRepositories
@using StudentInfo.Interfaces.IServices
@using StudentInfo.Model
@using StudentInfo.Repositories
@using StudentInfo.Pages.Faculty
@using Microsoft.AspNetCore.Components.Web
<PageTitle>Faculties</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Faculties" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="Search ..." style="display: block; width: 100%" @oninput="Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@faculties" TItem="Faculty">
                <Columns>
                    <RadzenDataGridColumn TItem="Faculty" Property="FacultyId" Title="Faculty Id">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Faculty" Property="Name" Title="Name">
                    </RadzenDataGridColumn>

                     <RadzenDataGridColumn TItem="Faculty" Title="Department" Sortable="false" Filterable="false">
                        <Template Context="faculty">
                            <ul>
                                @foreach (var department in departments)
                                {
                                    @if (department.FacultyId == faculty.FacultyId)
                                    {
                                        <li>@department.Name.ToString()</li>
                                    }
                                }
                            </ul>
                        </Template>
                    </RadzenDataGridColumn> 

                    <RadzenDataGridColumn TItem="Faculty" Property="Note" Title="Note">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Faculty" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="faculty">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click="@((args) => GridDeleteFacultyButtonClick(args, faculty))" />
                            <RadzenButton ButtonStyle="ButtonStyle.Warning" Icon="edit" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click="@((args) => EditRow(faculty))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>



@code {

    protected IEnumerable<Faculty> faculties;
    protected RadzenDataGrid<Faculty> grid0;
    private List<Department> departments; 

    protected string search = "";

    protected async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";

        await grid0.GoToPage(0);

        RefreshTable();
    }

    private void RefreshTable()
    {

        faculties = facultyRepository.GetAllElements();
        StateHasChanged();
    }
    private void RefreshDepartmant()
    {
        departments = departmentRepository.GetAllElements().ToList();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        RefreshTable();
        faculties = facultyRepository.GetAllElements();
        departments = departmentRepository.GetAllElements().ToList();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await dialogService.OpenAsync("Add Faculty", ds => @<CreateFaculty/>, 
        new DialogOptions() { Width = "400px", Height = "400px", Resizable = false, Draggable = false });
        await grid0.Reload();
        RefreshTable();
        RefreshDepartmant();
    }

    protected async Task EditRow(object args)
    {
        if (args is Faculty faculty)
        {
            await dialogService.OpenAsync("Add Faculty", ds => @<EditFaculty  Id="faculty.FacultyId" />,
            new DialogOptions() { Width = "400px", Height = "400px", Resizable = false, Draggable = false });
            RefreshTable();
        }
    }

    protected async Task GridDeleteFacultyButtonClick(object args, Faculty faculty)
    {
        try
        {
            if (await dialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = facultyRepository.DeleteElement(faculty.FacultyId);

               if (deleteResult != null)
               {
                    RefreshTable();
                }
            }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Faculty"
                });
        }
    }

    protected async Task GridDeleteDepartmantClick(object args, Department departmant)
    {
        try
        {
            if (await dialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = departmentRepository.DeleteElement(departmant.DepartmentId);

                if (deleteResult != null)
                {
                    RefreshDepartmant();
                }
            }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Faculty"
                });
        }
    }

}

